export declare type PadInfo = {
    top: number;
    left: number;
    right: number;
    bottom: number;
};
export declare type ConvInfo = {
    inShape: [number, number, number];
    outShape: [number, number, number];
    strideHeight: number;
    strideWidth: number;
    filterHeight: number;
    filterWidth: number;
    padInfo: PadInfo;
};
export declare type DepthwiseConvInfo = {
    inShape: [number, number, number, number];
    outShape: [number, number, number, number];
    channelMul: number;
    strideHeight: number;
    strideWidth: number;
    filterHeight: number;
    filterWidth: number;
    padInfo: PadInfo;
};
export declare function computeDepthwiseConv2DInfo(inShape: [number, number, number, number], filterShape: [number, number, number, number], strides: number | [number, number], pad: 'same' | 'valid' | number): DepthwiseConvInfo;
export declare function computeConv2DInfo(inShape: [number, number, number], filterHeight: number, filterWidth: number, outDepth: number, strideHeight: number, strideWidth: number, pad: 'same' | 'valid' | number): ConvInfo;
export declare function computeOutputShape3D(inShape: [number, number, number], fieldSize: number, outDepth: number, stride: number, zeroPad?: number): [number, number, number];
export declare function computeDefaultPad(inputShape: [number, number, number], fieldSize: number, stride: number): number;
export declare function computeWeightsShape4D(inputDepth: number, outputDepth: number, filterHeight: number, filterWidth: number): [number, number, number, number];
export declare function computeDilatedRC(rc: [number, number], origStride: number): [number, number];
